openapi: 3.0.3
info:
  title: WASAText
  description: |
    API for messaging app WASAText
  version: 0.0.1
security:
  - bearerAuth: [ ]
tags:
  - name: login
    description: login operations
  - name: user
    description: user operations
  - name: chats
    description: chats operations
  - name: messages
    description: messages operations
  - name: comments
    description: comment operations
paths:
  /session:
    post:
      tags: [ "login" ]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: Unique user bearer token
                properties:
                  identifier:
                    description: Bearer token
                    type: string
                    minLength: 20
                    maxLength: 2048
                    pattern: '^[A-Za-z0-9\-._~+/]+=*$'
                    example: "974a172-d346-48f3-8100-1e055ca991b4"
  /users:
    get:
      tags:
        - user
      summary: Get the registered users
      description: 'Returns a json array of the users in the app'
      operationId: getUsers
      responses:
        "200":
          description: users found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user
      summary: Updates the username
      description: 'Updates the username with the one given in the request.
                    Requires a valid Bearer token in the Authorization header.'
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsernameRequest"
        required: true
      responses:
        "200":
          description: Username updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "409":
          $ref: '#/components/responses/ConflictError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /users/image:
    get:
      tags:
        - user
      summary: Get user image url
      description: Retrieve the url where the user profile picture is stored in the server
      operationId: getMyPhoto
      responses:
        "200":
          description: Image url fetched successfully.
          content:
            application/json:
              schema:
                type: object
                description: url or path where the image is stored in the server
                properties:
                  imageUrl:
                    description: image url
                    type: string
                    format: uri
                    minLength: 18
                    maxLength: 255
                    pattern: '^uploads\/user\/images\/[a-zA-Z0-9_\-]+\.(jpg|jpeg|png|gif)$'
                    example: uploads/user/images/profile.jpg
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user
      summary: Sets user profile photo
      description: >
        Updates the profile picture for the authenticated user.
        Requires a valid Bearer token in the Authorization header.
      operationId: setMyPhoto
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: form data request with the image file to update user profile picture
              properties:
                image:
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 10485760
                  pattern: '^.*\.(jpg|jpeg|png)$'
                  description: The image file to upload. Must be a JPEG or PNG image, max 10MB.
      responses:
        "200":
          description: Profile image updated successfully.
          content:
            application/json:
              schema:
                type: object
                description: successful response when updating the profile picture
                properties:
                  imageUrl:
                    description: image url
                    type: string
                    format: uri
                    minLength: 18
                    maxLength: 255
                    pattern: '^uploads\/user\/images\/[a-zA-Z0-9_\-]+\.(jpg|jpeg|png|gif)$'
                    example: uploads/user/images/profile.jpg
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /chats:
    get:
      tags:
        - chats
      operationId: getMyConversations
      summary: Get user chats
      description: "Get all the user's conversations"
      responses:
        "200":
          description: Chats found
          content:
            application/json:
              schema:
                description: chats
                type: array
                items:
                  $ref: "#/components/schemas/Chat"
                minItems: 1
                maxItems: 999
        "204":
          description: "No Chats"
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - chats
      summary: Create new Chat
      description: |
        Create a new conversation with an optional initial message.
        Supports both text messages (JSON) and media messages (multipart/form-data).
        If it's the first message between users, a new conversation will be created.
      operationId: createChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FirstMessageRequest"
            examples:
              textMessage:
                summary: Text message example
                value:
                  text: "Hello, team!"
                  type: "text"
                  chatName: "Project X"
                  receivers: [ "alice", "bob", "mark" ]
                  isForward: false
              noInitialMessage:
                summary: Create chat without initial message
                value:
                  chatName: "Project X"
                  receivers: [ "alice", "bob" ]
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FirstMessageFormData"
            examples:
              imageMessage:
                summary: Image message example
                value:
                  type: "image"
                  text: "Check out this photo!"
                  chatName: "Project X"
                  receivers: '["alice", "bob", "mark"]'
                  isForward: "false"
                  image: "(binary image data)"
      responses:
        '201':
          description: New chat created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /chats/{chatId}:
    parameters:
      - $ref: "#/components/parameters/ChatID"
    get:
      tags:
        - chats
      summary: Get messages in a chat
      description: Returns an array of messages sent in a chat
      operationId: getConversation
      responses:
        "200":
          description: Messages found
          content:
            application/json:
              schema:
                description: chat messages
                type: array
                items:
                  $ref: "#/components/schemas/Message"
                minItems: 1
                maxItems: 99999
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - chats
      summary: Updates the group name
      description: "Updates the group name with the one given in the request"
      operationId: setGroupName
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: new name of the group chat set by the user
              properties:
                chatName:
                  description: Chat title, user name or group name
                  type: string
                  example: "Study group"
                  pattern: "^[a-zA-Z0-9_ -]+$"
                  minLength: 3
                  maxLength: 24

      responses:
        "200":
          description: Chat name updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chat"
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /chats/{chatId}/members:
    parameters:
      - $ref: "#/components/parameters/ChatID"
    get:
      tags:
        - chats
      operationId: getGroupMembers
      summary: get the list of members of the group chat
      description: "Return the list of users members of the group chat"
      responses:
        "200":
          description: Chat members fetched successfully
          content:
            application/json:
              schema:
                description: chat members
                type: array
                items:
                  $ref: "#/components/schemas/User"
                minItems: 1
                maxItems: 9999
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - chats
      operationId: addToGroup
      summary: Add user to group
      description: "Add an user to a a group. If user is already present, nothing will change"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameRequest'
      responses:
        "201":
          description: User added to chat
          content:
            application/json:
              schema:
                description: chat members
                type: array
                items:
                  $ref: "#/components/schemas/User"
                minItems: 1
                maxItems: 9999
        "400":
          $ref: '#/components/responses/BadRequestError'
        "409":
          $ref: '#/components/responses/ConflictError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - chats
      summary: Leave group
      description: "Remove an user from a group. Users can only remove themselves."
      operationId: leaveGroup
      responses:
        "200":
          description: Group has been left
          content:
            application/json:
              schema:
                description: chat members
                type: array
                items:
                  $ref: "#/components/schemas/User"
                minItems: 1
                maxItems: 9999
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /chats/{chatId}/last-read:
    parameters:
      - $ref: "#/components/parameters/ChatID"
    get:
      tags:
        - chats
      operationId: getLastRead
      summary: get the last read message id
      description: "Return the ID of the last message read by every member of the chat"
      responses:
        200:
          description: Last Read message ID fetched successfully
          content:
            application/json:
              schema:
                description: last read message ID
                type: object
                properties:
                  lasReadId:
                    description: identifier for the message
                    type: number
                    format: integer
                    example: 134
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /chats/{chatId}/image:
    parameters:
      - $ref: "#/components/parameters/ChatID"
    put:
      tags:
        - chats
      summary: Sets group profile photo
      description: "Updates the group profile picture with the one given in the request"
      operationId: setGroupPhoto
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              description: form data request with the image file to update group chat picture
              properties:
                image:
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 10485760
                  pattern: '^.*\.(jpg|jpeg|png)$'
                  description: The image file to upload. Must be a JPEG or PNG image, max 10MB.
        required: true
      responses:
        "200":
          description: Group image updated successfully.
          content:
            application/json:
              schema:
                type: object
                description: successful response when updating group chat image
                properties:
                  success:
                    description: successful operation
                    type: boolean
                    example: true
                  message:
                    description: response message
                    type: string
                    example: Group image updated successfully.
                    minLength: 33
                    maxLength: 33
                    pattern: '^Group image updated successfully\.$'
                  imageUrl:
                    description: image address
                    type: string
                    format: uri
                    minLength: 19
                    maxLength: 255
                    pattern: '^uploads\/chats\/images\/[a-zA-Z0-9_\-]+\.(jpg|jpeg|png|gif)$'
                    example: uploads/chats/images/profile.jpg
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /uploads/{folder}/images/{filename}:
    get:
      summary: Get an uploaded image file
      description: Serves a static image file from the uploads directory.
        The file can be located in the `users`, `chats`, or `messages` folder.
        The request requires an Authorization header.
      tags:
        - media
      operationId: getImage
      parameters:
        - name: folder
          in: path
          required: true
          description: The folder where the image is stored (users, chats, messages)
          schema:
            type: string
            description: The folder where the image is stored (users, chats, messages)
            minLength: 4
            maxLength: 8
            pattern: '^(user|chats|messages)$'
            enum: [ user, chats, messages ]
        - name: filename
          in: path
          required: true
          description: The filename of the image to fetch (e.g. abc123.jpg)
          schema:
            description: The filename of the image to fetch (e.g. abc123.jpg)
            type: string
            minLength: 4
            maxLength: 255
            pattern: '^.+\.(jpg|jpeg|png|gif|webp)$'
            example: "image.png"
      responses:
        '200':
          description: Image file fetched successfully
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
                description: JPEG image file.
                minLength: 1
                maxLength: 10485760
                pattern: '^.*$'
            image/png:
              schema:
                type: string
                format: binary
                description: PNG image file.
                minLength: 1
                maxLength: 10485760
                pattern: '^.*$'
            image/gif:
              schema:
                type: string
                format: binary
                description: GIF image file.
                minLength: 1
                maxLength: 10485760
                pattern: '^.*$'
            image/webp:
              schema:
                type: string
                format: binary
                description: WEBP image file.
                minLength: 1
                maxLength: 10485760
                pattern: '^.*$'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /chats/{chatId}/messages:
    parameters:
      - $ref: "#/components/parameters/ChatID"
    post:
      tags:
        - messages
      summary: Send a message
      description: |
        Send a new message in a conversation. If it's the first one,
        a new conversation will be created
      operationId: sendMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MessageFormData"
        required: true
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /messages/{messageId}:
    parameters:
      - $ref: "#/components/parameters/MessageID"
    delete:
      tags:
        - messages
      summary: Delete message
      description: "Delete a message"
      operationId: deleteMessage
      responses:
        "200":
          description: Message deleted successfully
          content:
            application/json:
              schema:
                type: object
                description: Response JSON for deleting messages lets the user know if the chat gets deleted as well
                properties:
                  chatDeleted:
                    type: boolean
                    description: flag to communicate if the chat is being deleted by cascade after the message deletion
                    example: false
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /messages/{messageId}/forwards:
    parameters:
      - $ref: "#/components/parameters/MessageID"
    post:
      tags:
        - messages
      summary: Forward a message
      description: "Forward a message retrieving message data from the database"
      operationId: forwardMessage
      responses:
        "201":
          description: Message forwarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /messages/{messageId}/comments:
    parameters:
      - $ref: "#/components/parameters/MessageID"
    get:
      tags:
        - comments
      operationId: getComments
      summary: Get message comments
      description: "Get all the message's comments"
      responses:
        "200":
          description: Comments found
          content:
            application/json:
              schema:
                description: message comments
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
                minItems: 1
                maxItems: 9999
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - comments
      operationId: commentMessage
      summary: Comment a message
      description: "Add a comment to a message. If user's comment is already present, nothing will change"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "200":
          description: Comment added
          content:
            application/json:
              schema:
                description: message comments
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
                minItems: 1
                maxItems: 9999
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - comments
      summary: Delete comment
      operationId: uncommentMessage
      description: "Remove user comment from a message. If no comment is present, nothing will change"
      responses:
        "200":
          description: Comment deleted
          content:
            application/json:
              schema:
                description: message comments
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
                minItems: 1
                maxItems: 9999
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    User:
      title: User
      description: Unique user
      type: object
      properties:
        id:
          description: Unique identifier for the user
          type: integer
          example: 223
          readOnly: True
        username:
          description: username
          type: string
          example: 'mario'
          pattern: "^[a-zA-Z0-9_-]+$"
          minLength: 3
          maxLength: 16

    Chat:
      title: Chat
      description: Generic chat
      type: object
      properties:
        id:
          description: Unique identifier for the chat
          type: integer
          example: 223
          readOnly: True
        isGroup:
          description: identifies chat as a group or private chat
          type: boolean
          example: true
        chatName:
          description: Chat title, user name or group name
          type: string
          example: "Study group"
          pattern: "^[a-zA-Z0-9_ -]+$"
          minLength: 3
          maxLength: 24
        lastMsgText:
          description: text of the last message in the chat
          type: string
          example: "The meeting is canceled"
          pattern: "^[a-zA-Z0-9_ -]+$"
          minLength: 1
          maxLength: 99
        lastMsgTime:
          description: Date and time when the message is sent
          type: string
          format: date-time
          pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
          example: "2024-10-11T12:14:23Z"
          readOnly: true
          minLength: 20
          maxLength: 20
        lastMsgType:
          description: type of the message, either text or image
          type: string
          enum: ["text", "image", "gif"]
          minLength: 3
          maxLength: 5
          pattern: '^(text|image|gif)$'
          example: "text"
        unread:
          description: unread messages count for the chat
          type: integer
          example: 3

    Message:
      title: Message
      description: Single message
      type: object
      properties:
        id:
          description: Unique identifier for the message
          type: integer
          example: 223
          readOnly: True
        type:
          description: type of the message, either text, image or gif
          type: string
          enum: [ "text", "image", "gif" ]
          minLength: 3
          maxLength: 5
          pattern: '^(text|image|gif)$'
          example: "text"
        text:
          description: message text
          type: string
          example: "hello world"
          pattern: "^[a-zA-Z0-9_ -]+$"
          minLength: 1
          maxLength: 255
        chatId:
          description: Identifier for the chat
          type: integer
          example: 223
        senderId:
          description: Identifier for the sender
          type: integer
          example: 223
        isForward:
          type: boolean
          description: Whether this message is forwarded from another chat.
          example: false
        replyTo:
          description: Identifier for the message this one is replying to
          type: integer
          example: 223
        createdAt:
          description: Date and time when the message is sent
          type: string
          format: date-time
          pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
          example: "2024-10-11T12:14:23Z"
          readOnly: true
          minLength: 20
          maxLength: 20


    Comment:
      title: Comment
      description: Single comment
      type: object
      properties:
        userId:
          description: Unique identifier for the comment's user
          type: integer
          example: 223
          readOnly: True
        timestamp:
          description: Date and time when the comment is put
          type: string
          format: date-time
          pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
          example: "2024-10-11T12:14:23Z"
          readOnly: true
          minLength: 20
          maxLength: 20

    LoginRequest:
      title: Login Request
      description: Request consists in a string
      type: object
      properties:
        username:
          description: username
          type: string
          example: 'mario'
          pattern: "^[a-zA-Z0-9_-]+$"
          minLength: 3
          maxLength: 16

    UsernameRequest:
      title: Username Request
      description: Request consists in a string to change the username
      type: object
      properties:
        username:
          description: username
          type: string
          example: 'mario'
          pattern: "^[a-zA-Z0-9_-]+$"
          minLength: 3
          maxLength: 16

    MessageRequest:
      type: object
      description: message data
      properties:
        text:
          description: message text
          type: string
          example: "hello world"
          pattern: "^[a-zA-Z0-9_ -]+$"
          minLength: 1
          maxLength: 255
        type:
          description: type of the message, either text, image or gif
          type: string
          enum: [ "text", "image", "gif" ]
          minLength: 3
          maxLength: 5
          pattern: '^(text|image|gif)$'
          example: "text"
        isForward:
          type: boolean
          description: Whether this message is forwarded from another chat
          default: false
          example: false
        replyTo:
          type: integer
          description: message id of the message of which this one is replying
          default: 0
          example: 223

    MessageFormData:
      type: object
      description: message input form data, used when image url is present
      properties:
        type:
          description: type of the message, either text, image or gif
          type: string
          enum: [ "text", "image", "gif" ]
          minLength: 3
          maxLength: 5
          pattern: '^(text|image|gif)$'
          example: "text"
        text:
          description: message text
          type: string
          example: "hello world"
          pattern: "^[a-zA-Z0-9_ -]+$"
          minLength: 1
          maxLength: 255
        isForward:
          type: boolean
          description: Whether this message is forwarded from another chat
          default: false
          example: false
        replyTo:
          type: integer
          description: message id of the message of which this one is replying
          default: 0
          example: 223
        image:
          type: string
          format: binary
          description: The image or GIF file to upload (max 10MB)
      required:
        - type
        - image
      additionalProperties: false

    FirstMessageRequest:
      type: object
      description: message input form data for creating new chat
      properties:
        text:
          description: message text
          type: string
          example: "hello world"
          pattern: "^[a-zA-Z0-9_ -]+$"
          minLength: 1
          maxLength: 255
        type:
          description: type of the message, either text, image or gif
          type: string
          enum: [ "text", "image", "gif" ]
          minLength: 3
          maxLength: 5
          pattern: '^(text|image|gif)$'
          example: "text"
        chatName:
          type: string
          description: Name of the chat to create (required for group chats with multiple receivers)
          example: "Project X"
        receivers:
          type: array
          description: List of usernames to receive the message
          items:
            type: string
          minItems: 1
          maxItems: 99
          example: [ "alice", "bob", "mark" ]
        isForward:
          type: boolean
          description: Whether this message is forwarded from another chat
          default: false
          example: false
      required:
        - receivers
      additionalProperties: false

    FirstMessageFormData:
      type: object
      description: message input form data for creating new chat, used when image url is present
      properties:
        type:
          description: type of the message, either text, image or gif
          type: string
          enum: [ "text", "image", "gif" ]
          minLength: 3
          maxLength: 5
          pattern: '^(text|image|gif)$'
          example: "text"
        text:
          description: message text
          type: string
          example: "hello world"
          pattern: "^[a-zA-Z0-9_ -]+$"
          minLength: 1
          maxLength: 255
        chatName:
          type: string
          description: Name of the chat to create (required for group chats with multiple receivers)
          example: "Project X"
        receivers:
          type: string
          description: JSON string array of usernames to receive the message
          example: '["alice", "bob", "mark"]'
        isForward:
          type: boolean
          description: Whether this message is forwarded from another chat
          default: false
          example: false
        image:
          type: string
          format: binary
          description: The image or GIF file to upload (max 10MB)
          minLength: 1
          maxLength: 10485760
          pattern: '^.*$'
      required:
        - type
        - receivers
        - image
      additionalProperties: false

    Error:
      type: object
      description: error object
      properties:
        error:
          type: string
          description: error type text
          example: "Invalid request"
        message:
          type: string
          description: error message
          example: "The request could not be processed"
        code:
          description: error code
          type: integer
          example: 400

  parameters:
    ChatID:
      schema:
        description: identifier for the chat
        type: number
        format: integer
        example: 134
      name: chatId
      in: path
      required: true
      description: Chat identifier

    MessageID:
      schema:
        description: identifier for the message
        type: number
        format: integer
        example: 134
      name: messageId
      in: path
      required: true
      description: Message identifier

  responses:
    UnauthorizedError:
      description: Invalid or missing bearer token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ConflictError:
      description: Conflict error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequestError:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
